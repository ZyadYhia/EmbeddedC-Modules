
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000424  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000424  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000100  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001482  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000633  00000000  00000000  00001a12  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000719  00000000  00000000  00002045  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001e4  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000401  00000000  00000000  00002944  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007d0  00000000  00000000  00002d45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001c8  00000000  00000000  00003515  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  64:	0c 94 e6 01 	jmp	0x3cc	; 0x3cc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <setPinD>:
}
void resetPortD(char data){
	PORTD &= data;
}
void togglePinD(int pinNumber){
	PORTD ^= (1<<pinNumber);
  6c:	92 b3       	in	r25, 0x12	; 18
  6e:	21 e0       	ldi	r18, 0x01	; 1
  70:	30 e0       	ldi	r19, 0x00	; 0
  72:	02 c0       	rjmp	.+4      	; 0x78 <setPinD+0xc>
  74:	22 0f       	add	r18, r18
  76:	33 1f       	adc	r19, r19
  78:	8a 95       	dec	r24
  7a:	e2 f7       	brpl	.-8      	; 0x74 <setPinD+0x8>
  7c:	29 2b       	or	r18, r25
  7e:	22 bb       	out	0x12, r18	; 18
  80:	08 95       	ret

00000082 <resetPinD>:
  82:	92 b3       	in	r25, 0x12	; 18
  84:	21 e0       	ldi	r18, 0x01	; 1
  86:	30 e0       	ldi	r19, 0x00	; 0
  88:	02 c0       	rjmp	.+4      	; 0x8e <resetPinD+0xc>
  8a:	22 0f       	add	r18, r18
  8c:	33 1f       	adc	r19, r19
  8e:	8a 95       	dec	r24
  90:	e2 f7       	brpl	.-8      	; 0x8a <resetPinD+0x8>
  92:	20 95       	com	r18
  94:	29 23       	and	r18, r25
  96:	22 bb       	out	0x12, r18	; 18
  98:	08 95       	ret

0000009a <isPressedD>:
}
int isPressedD(int pinNumber){
	if (PIND & (1<<pinNumber))
  9a:	20 b3       	in	r18, 0x10	; 16
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	a9 01       	movw	r20, r18
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <isPressedD+0xc>
  a2:	55 95       	asr	r21
  a4:	47 95       	ror	r20
  a6:	8a 95       	dec	r24
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <isPressedD+0x8>
  aa:	ca 01       	movw	r24, r20
	}
	else
	{
		return 0;
	}
  ac:	81 70       	andi	r24, 0x01	; 1
  ae:	99 27       	eor	r25, r25
  b0:	08 95       	ret

000000b2 <main>:
#include <avr/io.h>
#include "IO.h"

int main(void)
{
	DDRD |= (1<<0)|(1<<1)|(1<<2);
  b2:	81 b3       	in	r24, 0x11	; 17
  b4:	87 60       	ori	r24, 0x07	; 7
  b6:	81 bb       	out	0x11, r24	; 17
	//PORTD |= (1<<0)|(1<<1)|(1<<2);
	DDRA |= 0xFF;
  b8:	8a b3       	in	r24, 0x1a	; 26
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	8a bb       	out	0x1a, r24	; 26
	{
		DDRA &= ~(1<<pinNumper);
	}
}
void setPortA(char data){
	PORTA = data;
  be:	bb 24       	eor	r11, r11
  c0:	b3 94       	inc	r11
  c2:	68 94       	set
  c4:	cc 24       	eor	r12, r12
  c6:	c1 f8       	bld	r12, 1
  c8:	0f 2e       	mov	r0, r31
  ca:	f3 e0       	ldi	r31, 0x03	; 3
  cc:	df 2e       	mov	r13, r31
  ce:	f0 2d       	mov	r31, r0
  d0:	68 94       	set
  d2:	ee 24       	eor	r14, r14
  d4:	e2 f8       	bld	r14, 2
  d6:	0f 2e       	mov	r0, r31
  d8:	f5 e0       	ldi	r31, 0x05	; 5
  da:	ff 2e       	mov	r15, r31
  dc:	f0 2d       	mov	r31, r0
  de:	06 e0       	ldi	r16, 0x06	; 6
  e0:	17 e0       	ldi	r17, 0x07	; 7
  e2:	d8 e0       	ldi	r29, 0x08	; 8
  e4:	c9 e0       	ldi	r28, 0x09	; 9
	while (1)
	{
		PORTD |= (1<<0)|(1<<1)|(1<<2);
  e6:	82 b3       	in	r24, 0x12	; 18
  e8:	87 60       	ori	r24, 0x07	; 7
  ea:	82 bb       	out	0x12, r24	; 18
		if (isPressedD(4)) //First H-Line
  ec:	84 e0       	ldi	r24, 0x04	; 4
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
  f4:	89 2b       	or	r24, r25
  f6:	09 f4       	brne	.+2      	; 0xfa <main+0x48>
  f8:	57 c0       	rjmp	.+174    	; 0x1a8 <main+0xf6>
		{
			setPinD(0);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 10a:	82 e0       	ldi	r24, 0x02	; 2
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(4))
 112:	84 e0       	ldi	r24, 0x04	; 4
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 11a:	89 2b       	or	r24, r25
 11c:	11 f0       	breq	.+4      	; 0x122 <main+0x70>
 11e:	1b ba       	out	0x1b, r1	; 27
 120:	db ba       	out	0x1b, r13	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	81 ee       	ldi	r24, 0xE1	; 225
 126:	94 e0       	ldi	r25, 0x04	; 4
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x76>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x80>
 132:	00 00       	nop
				//No.3
				setPortA(0);
				setPortA(3);
			}
			_delay_ms(100);
			setPinD(1);
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(0);
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(4))
 14c:	84 e0       	ldi	r24, 0x04	; 4
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 154:	89 2b       	or	r24, r25
 156:	11 f0       	breq	.+4      	; 0x15c <main+0xaa>
 158:	1b ba       	out	0x1b, r1	; 27
 15a:	cb ba       	out	0x1b, r12	; 27
 15c:	2f ef       	ldi	r18, 0xFF	; 255
 15e:	81 ee       	ldi	r24, 0xE1	; 225
 160:	94 e0       	ldi	r25, 0x04	; 4
 162:	21 50       	subi	r18, 0x01	; 1
 164:	80 40       	sbci	r24, 0x00	; 0
 166:	90 40       	sbci	r25, 0x00	; 0
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0xb0>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0xba>
 16c:	00 00       	nop
				//No.2
				setPortA(0);
				setPortA(2);
			}
			_delay_ms(100);
			setPinD(2);
 16e:	82 e0       	ldi	r24, 0x02	; 2
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(0);
 17e:	80 e0       	ldi	r24, 0x00	; 0
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(4))
 186:	84 e0       	ldi	r24, 0x04	; 4
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 18e:	89 2b       	or	r24, r25
 190:	11 f0       	breq	.+4      	; 0x196 <main+0xe4>
 192:	1b ba       	out	0x1b, r1	; 27
 194:	bb ba       	out	0x1b, r11	; 27
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	81 ee       	ldi	r24, 0xE1	; 225
 19a:	94 e0       	ldi	r25, 0x04	; 4
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xea>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xf4>
 1a6:	00 00       	nop
				setPortA(0);
				setPortA(1);
			}
			_delay_ms(100);
		}
		if (isPressedD(5)) //second H-Line
 1a8:	85 e0       	ldi	r24, 0x05	; 5
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 1b0:	89 2b       	or	r24, r25
 1b2:	09 f4       	brne	.+2      	; 0x1b6 <main+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <main+0x1b2>
		{
			setPinD(0);
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(5))
 1ce:	85 e0       	ldi	r24, 0x05	; 5
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 1d6:	89 2b       	or	r24, r25
 1d8:	11 f0       	breq	.+4      	; 0x1de <main+0x12c>
 1da:	1b ba       	out	0x1b, r1	; 27
 1dc:	0b bb       	out	0x1b, r16	; 27
 1de:	2f ef       	ldi	r18, 0xFF	; 255
 1e0:	81 ee       	ldi	r24, 0xE1	; 225
 1e2:	94 e0       	ldi	r25, 0x04	; 4
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	80 40       	sbci	r24, 0x00	; 0
 1e8:	90 40       	sbci	r25, 0x00	; 0
 1ea:	e1 f7       	brne	.-8      	; 0x1e4 <main+0x132>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <main+0x13c>
 1ee:	00 00       	nop
				//No.6
				setPortA(0);
				setPortA(6);
			}
			_delay_ms(100);
			setPinD(1);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(0);
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 200:	82 e0       	ldi	r24, 0x02	; 2
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(5))
 208:	85 e0       	ldi	r24, 0x05	; 5
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 210:	89 2b       	or	r24, r25
 212:	11 f0       	breq	.+4      	; 0x218 <main+0x166>
 214:	1b ba       	out	0x1b, r1	; 27
 216:	fb ba       	out	0x1b, r15	; 27
 218:	2f ef       	ldi	r18, 0xFF	; 255
 21a:	81 ee       	ldi	r24, 0xE1	; 225
 21c:	94 e0       	ldi	r25, 0x04	; 4
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <main+0x16c>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x176>
 228:	00 00       	nop
				//No.5
				setPortA(0);
				setPortA(5);
			}
			_delay_ms(100);
			setPinD(2);
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(0);
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(5))
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 24a:	89 2b       	or	r24, r25
 24c:	11 f0       	breq	.+4      	; 0x252 <main+0x1a0>
 24e:	1b ba       	out	0x1b, r1	; 27
 250:	eb ba       	out	0x1b, r14	; 27
 252:	2f ef       	ldi	r18, 0xFF	; 255
 254:	81 ee       	ldi	r24, 0xE1	; 225
 256:	94 e0       	ldi	r25, 0x04	; 4
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <main+0x1a6>
 260:	00 c0       	rjmp	.+0      	; 0x262 <main+0x1b0>
 262:	00 00       	nop
				setPortA(0);
				setPortA(4);
			}
			_delay_ms(100);
		}
		if (isPressedD(6)) //third H-Line
 264:	86 e0       	ldi	r24, 0x06	; 6
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 26c:	89 2b       	or	r24, r25
 26e:	09 f4       	brne	.+2      	; 0x272 <main+0x1c0>
 270:	57 c0       	rjmp	.+174    	; 0x320 <main+0x26e>
		{
			setPinD(0);
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(6))
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 292:	89 2b       	or	r24, r25
 294:	11 f0       	breq	.+4      	; 0x29a <main+0x1e8>
 296:	1b ba       	out	0x1b, r1	; 27
 298:	cb bb       	out	0x1b, r28	; 27
 29a:	2f ef       	ldi	r18, 0xFF	; 255
 29c:	81 ee       	ldi	r24, 0xE1	; 225
 29e:	94 e0       	ldi	r25, 0x04	; 4
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	80 40       	sbci	r24, 0x00	; 0
 2a4:	90 40       	sbci	r25, 0x00	; 0
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <main+0x1ee>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <main+0x1f8>
 2aa:	00 00       	nop
				//No.9
				setPortA(0);
				setPortA(9);
			}
			_delay_ms(100);
			setPinD(1);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(0);
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 2bc:	82 e0       	ldi	r24, 0x02	; 2
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(6))
 2c4:	86 e0       	ldi	r24, 0x06	; 6
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 2cc:	89 2b       	or	r24, r25
 2ce:	11 f0       	breq	.+4      	; 0x2d4 <main+0x222>
 2d0:	1b ba       	out	0x1b, r1	; 27
 2d2:	db bb       	out	0x1b, r29	; 27
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	81 ee       	ldi	r24, 0xE1	; 225
 2d8:	94 e0       	ldi	r25, 0x04	; 4
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <main+0x228>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <main+0x232>
 2e4:	00 00       	nop
				//No.8
				setPortA(0);
				setPortA(8);
			}
			_delay_ms(100);
			setPinD(2);
 2e6:	82 e0       	ldi	r24, 0x02	; 2
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(0);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(6))
 2fe:	86 e0       	ldi	r24, 0x06	; 6
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 306:	89 2b       	or	r24, r25
 308:	11 f0       	breq	.+4      	; 0x30e <main+0x25c>
 30a:	1b ba       	out	0x1b, r1	; 27
 30c:	1b bb       	out	0x1b, r17	; 27
 30e:	2f ef       	ldi	r18, 0xFF	; 255
 310:	81 ee       	ldi	r24, 0xE1	; 225
 312:	94 e0       	ldi	r25, 0x04	; 4
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <main+0x262>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <main+0x26c>
 31e:	00 00       	nop
				setPortA(0);
				setPortA(7);
			}
			_delay_ms(100);
		}
		if (isPressedD(7)) //forth H-Line
 320:	87 e0       	ldi	r24, 0x07	; 7
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 328:	89 2b       	or	r24, r25
 32a:	09 f4       	brne	.+2      	; 0x32e <main+0x27c>
 32c:	dc ce       	rjmp	.-584    	; 0xe6 <main+0x34>
		{
			setPinD(0);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(7))
 346:	87 e0       	ldi	r24, 0x07	; 7
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 34e:	2f ef       	ldi	r18, 0xFF	; 255
 350:	81 ee       	ldi	r24, 0xE1	; 225
 352:	94 e0       	ldi	r25, 0x04	; 4
 354:	21 50       	subi	r18, 0x01	; 1
 356:	80 40       	sbci	r24, 0x00	; 0
 358:	90 40       	sbci	r25, 0x00	; 0
 35a:	e1 f7       	brne	.-8      	; 0x354 <main+0x2a2>
 35c:	00 c0       	rjmp	.+0      	; 0x35e <main+0x2ac>
 35e:	00 00       	nop
			{
				//No.#
			}
			_delay_ms(100);
			setPinD(1);
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(0);
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(2);
 370:	82 e0       	ldi	r24, 0x02	; 2
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(7))
 378:	87 e0       	ldi	r24, 0x07	; 7
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 380:	89 2b       	or	r24, r25
 382:	09 f0       	breq	.+2      	; 0x386 <main+0x2d4>
 384:	1b ba       	out	0x1b, r1	; 27
 386:	2f ef       	ldi	r18, 0xFF	; 255
 388:	81 ee       	ldi	r24, 0xE1	; 225
 38a:	94 e0       	ldi	r25, 0x04	; 4
 38c:	21 50       	subi	r18, 0x01	; 1
 38e:	80 40       	sbci	r24, 0x00	; 0
 390:	90 40       	sbci	r25, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <main+0x2da>
 394:	00 c0       	rjmp	.+0      	; 0x396 <main+0x2e4>
 396:	00 00       	nop
			{
				//No.0
				setPortA(0);
			}
			_delay_ms(100);
			setPinD(2);
 398:	82 e0       	ldi	r24, 0x02	; 2
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 36 00 	call	0x6c	; 0x6c <setPinD>
			resetPinD(1);
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			resetPinD(0);
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	0e 94 41 00 	call	0x82	; 0x82 <resetPinD>
			if (isPressedD(7))
 3b0:	87 e0       	ldi	r24, 0x07	; 7
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 4d 00 	call	0x9a	; 0x9a <isPressedD>
 3b8:	2f ef       	ldi	r18, 0xFF	; 255
 3ba:	81 ee       	ldi	r24, 0xE1	; 225
 3bc:	94 e0       	ldi	r25, 0x04	; 4
 3be:	21 50       	subi	r18, 0x01	; 1
 3c0:	80 40       	sbci	r24, 0x00	; 0
 3c2:	90 40       	sbci	r25, 0x00	; 0
 3c4:	e1 f7       	brne	.-8      	; 0x3be <main+0x30c>
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <main+0x316>
 3c8:	00 00       	nop
 3ca:	8b ce       	rjmp	.-746    	; 0xe2 <main+0x30>

000003cc <_exit>:
 3cc:	f8 94       	cli

000003ce <__stop_program>:
 3ce:	ff cf       	rjmp	.-2      	; 0x3ce <__stop_program>
